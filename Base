#define SDL_MAIN_HANDLED
#define SDL_TTF_H
#include <SDL.h>
#include <iostream>
#include <cmath>
#include <SDL_ttf.h>
using namespace std;
//-lSDL2_ttf NU MERGEEEEEEEE
SDL_Texture* texturapiese[3];//self explenatory
//TTF_Font* font = TTF_OpenFont("C:\\Electron\\Movistar Text Regular.ttf", 20);

struct punct {
    float x, y;
};
struct piesa {
    int tip, ori,esteliber[3], a, b;
    float x, y, h, l;
    punct conexiuni[3];

}p[100], ogp[100];
//pieces and originals we will use as base
struct conexiune {
    int p1, p2, tip, pin1, pin2;
}c[100];

int k = 1, l, h, x, y, t, k2 = 1, nrcol, moves, moves2, clickMenu, ogk = 3, maxx, maxy, pm=0, pmx=-1, pmy=-1, pml, pmh, movepm=0, premovex, premovey;

//TTF_Font* font = TTF_OpenFont("C:\Electron\Movistar Text Regular.ttf", 20);

//colors we will use, to be updated later with prettier ones
SDL_Color col[10] = {
    {255,0,0,255},
    {0,255,0,255},
    {0,0,255,255}
};

void declarePieces(SDL_Renderer* renderer) {
    // incarcam imaginile in SDL_Surface
    SDL_Surface* surface1 = SDL_LoadBMP("C:\\Electron\\and.gate.bmp");
    SDL_Surface* surface2 = SDL_LoadBMP("C:\\Electron\\bec.bmp");
    SDL_Surface* surface3 = SDL_LoadBMP("C:\\Electron\\transistor.bmp");


    if (!surface1 || !surface2 || !surface3) {
        cout << "Nu s-au putut încărca imaginile pieselor: " << SDL_GetError() << endl;
    }
    else {
        //  creează texturi
        texturapiese[0] = SDL_CreateTextureFromSurface(renderer, surface1);
        texturapiese[1] = SDL_CreateTextureFromSurface(renderer, surface2);
        texturapiese[2] = SDL_CreateTextureFromSurface(renderer, surface3);


        if (!texturapiese[0] || !texturapiese[1] || !texturapiese[2]) {
            cout << "Nu s-au putut crea texturile: " << SDL_GetError() << endl;
        }


        SDL_FreeSurface(surface1);
        SDL_FreeSurface(surface2);
        SDL_FreeSurface(surface3);
    }


    ogp[0].l = 70, ogp[0].h = 70;
    ogp[1].l = 70, ogp[1].h = 70;
    ogp[2].l = 70, ogp[2].h = 70;
}
void setConexiuni(int tip, piesa& piesa) {
    // Setează punctele de conexiune în funcție de tipul piesei
    if (tip == 0) { // AND gate
        piesa.conexiuni[0].x = 0;
        piesa.conexiuni[0].y = piesa.h/2;
        piesa.conexiuni[1].x = 0;
        piesa.conexiuni[1].y = piesa.h/2+piesa.h/7;
        piesa.conexiuni[2].x= piesa.l;
        piesa.conexiuni[2].y = piesa.h/2+piesa.h/12;

    }
    else if (tip == 1) { // Bec
        piesa.conexiuni[0].x= 0;
        piesa.conexiuni[0].y = piesa.h/2+piesa.h/17;
        piesa.conexiuni[1].x = piesa.l+piesa.l/8.75;
        piesa.conexiuni[1].y = piesa.h / 2 + piesa.h / 17;

    }
    else if (tip == 2) { // Tranzistor
        piesa.conexiuni[0].x = piesa.l/14;
        piesa.conexiuni[0].y = piesa.h/2+piesa.h/35;
        piesa.conexiuni[1].x = piesa.l/2+piesa.l/7.77;
        piesa.conexiuni[1].y = piesa.l / 14;
        piesa.conexiuni[2].x = piesa.l / 2 + piesa.l / 7.77;
        piesa.conexiuni[2].y = piesa.h;

    }
}


void menu(SDL_Renderer* renderer) {
    clickMenu = 0;
    SDL_GetRendererOutputSize(renderer, &maxx, &maxy);
    //3 buttons for now each changing the piece we'll use
    if (x <= 100) {
        if (y <= 100) {
            t = 0;
            //changes color to the first one
            //nvm color will be based on type t
        }
        else if (y <= 200) {
            t = 1;
        }
        else if (y <= 300) {
            t = 2;
        }
        l = ogp[t].l, h = ogp[t].h; //select base piece

        SDL_SetRenderDrawColor(renderer, col[t].r, col[t].g, col[t].b, col[t].a);
        clickMenu = 1;
        moves = 0;
    }
    if (x >= maxx-100 && y <= 100)
        moves = 1, clickMenu = 1, cout << moves;
}


void drawMenu(SDL_Renderer* renderer) {
    SDL_GetRendererOutputSize(renderer, &maxx, &maxy);

    SDL_Rect button1 = { 0, 0, 100, 100 }; // poz prima piesa
    SDL_RenderCopy(renderer, texturapiese[0], NULL, &button1); //  prima piesă

    SDL_Rect button2 = { 0, 100, 100, 100 }; // poz a doua piesa
    SDL_RenderCopy(renderer, texturapiese[1], NULL, &button2); // desen a doua piesă

    SDL_Rect button3 = { 0, 200, 100, 100 }; //
    SDL_RenderCopy(renderer, texturapiese[2], NULL, &button3);


    SDL_Rect moveButton = { maxx-100, 0, 100, 100 };
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
    SDL_RenderFillRect(renderer, &moveButton);

}

void drawPieceMenu(SDL_Renderer* renderer, int &pm){
    if(pm){
    if(pmx==-1&&pmy==-1)
        pmx=maxx-250, pmy=maxy-400, pml=250, pmh=400;

    SDL_SetRenderDrawColor(renderer, pm*100%255, 57, 94, 255);
    SDL_Rect menup={pmx, pmy, pml, pmh};
    SDL_RenderFillRect(renderer, &menup);

    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    menup={pmx+pml*0.85, pmy, pml*0.15, pml*0.15};
    //cout<<pmx<< " "<<pmy<< " "<<pmx+pml*0.9<< " "<<pmy+pmh*0.9<<endl;
    SDL_RenderFillRect(renderer, &menup);

    SDL_SetRenderDrawColor(renderer, 100, 100, 100, 255);
    menup={pmx, pmy, pml*0.85, pml*0.15};
    SDL_RenderFillRect(renderer, &menup);

    //va trb sa adaug text..alta librarie..
    }
}

int inPieceMenu(){
    if(x>=pmx&&x<=pmx+pml&&y>=pmy&&y<=pmy+pmh){
        if(x>=pmx+pml*0.85&&y<=pmy+pml*0.15)
            pm=0;
        else if(x<pmx+pml*0.85&&y<=pmy+pmh*0.15)
            movepm=1;
        else movepm=0;
        cout<<movepm;
        return 1;
    }
    return 0;
}

void drawConnectionPoints(SDL_Renderer* renderer, piesa& piesa) {
    // Setează culoarea mov pentru dreptunghiuri
    SDL_SetRenderDrawColor(renderer, 255, 0, 255, 255); // Mov
    setConexiuni(piesa.tip, piesa);
    // Desenăm dreptunghiuri la punctele de conexiune
    for (int i = 0; i < 3; ++i) {
        if ((piesa.conexiuni[i].x != 0 || piesa.conexiuni[i].y != 0) && piesa.esteliber[i] == 1) {
            float pointX = piesa.x - piesa.l / 2 + piesa.conexiuni[i].x;
            float pointY = piesa.y - piesa.h / 2 + piesa.conexiuni[i].y;


            SDL_Rect rect = { pointX - piesa.l / 8.75, pointY - piesa.h / 8.75, piesa.l / 8.75, piesa.h / 8.75 }; // Ajustăm pentru a plasa punctul în mijloc
            SDL_RenderFillRect(renderer, &rect);
        }

    }
}

void drawPiece(SDL_Renderer* renderer, int i) {

    //piese inserate
    SDL_Rect rect = { p[i].x - p[i].l / 2,p[i].y - p[i].h / 2,p[i].l,p[i].h };
    if (p[i].a==0)
    {
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderFillRect(renderer, &rect);
    }
    else
    {
        SDL_RenderCopy(renderer, texturapiese[p[i].tip], NULL, &rect);
        //SDL_RenderCopyEx(renderer, texturapiese[p[i].tip], ) aici ptr rotatie continui tu
        //draws and updates screen
        drawConnectionPoints(renderer, p[i]);
    }

}
void createPiece(SDL_Renderer* renderer) {
    int i;
    p[k].x = x, p[k].y = y;
    p[k].l = l, p[k].h = h, p[k].tip = t;
    setConexiuni(t, p[k]);
    p[k++].ori = 0;
    for (i = 0;i < 3;i++)
        p[k - 1].esteliber[i] = 1;
    p[k - 1].a = p[k - 1].b = 1;
    drawPiece(renderer, k - 1);

}

void deleteConnection(int i, int x, int pin) {
    cout << "jezz" << i;
    p[x].esteliber[pin]--;

    for (int j2 = i;j2 <k2;j2++)
        c[j2] = c[j2 + 1];

    k2--;
}

void deletePiece(int i) {
    int j;
    for (j = 1;j <=k2;j++)
    {
        if (c[j].p1 == i) {
            deleteConnection(j, c[j].p2, c[j].pin2);

            j--;
        }
        if (c[j].p2 == i)
        {
            deleteConnection(j, c[j].p1, c[j].pin1);
            j--;
        }


    }
    for (j = 1; j <= k2; ++j) {
        if (c[j].p1 > i) c[j].p1--;
        if (c[j].p2 > i) c[j].p2--;
    }
    for (j = i;j < k;j++)
        p[j] = p[j + 1];
    k--;



}

int inPiece() {
    //return which piece was clicked, 0 if no piece
    for (int i = 0;i < k;i++) {
        if (x > p[i].x - p[i].l / 2 && x<p[i].x + p[i].l / 2 &&
            y>p[i].y - p[i].h / 2 && y < p[i].y + p[i].h / 2)
            return i;
    }
    return 0;
}

void movePiece(SDL_Renderer* renderer, SDL_Event event) {
    c[k2].p2 = 0;
    SDL_GetMouseState(&x, &y);
    int i = inPiece(),ok=1,j;
    p[inPiece()].x += event.motion.xrel; // moves position
    p[inPiece()].y += event.motion.yrel;
    for (j = 1;j <=k && ok;j++)
        if (abs(p[j].x - p[i].x) < (p[j].l + p[i].l) / 2 && abs(p[j].y - p[i].y) < (p[j].l + p[i].l) / 2 && i != j)
        {
            p[i].a = 0;
            p[i].b = j;
            ok = 0;
        }
    if (ok)
    {
        p[i].a = 1;
        p[p[i].b].a = 1;
    }
}

void movePieceMenu(SDL_Renderer* renderer, SDL_Event event) {
    c[k2].p2=0;
    SDL_GetMouseState(&x, &y);

    pmx += event.motion.xrel; // moves position
    pmy += event.motion.yrel;
    //cout<<pmx<< " "<<pmy<<endl;
}

int inPunct(float mouseX, float mouseY, int& piesaselectata, int& pinselectat) {
    int i;
    for(i=0;i<k;i++)
        for (int j = 0; j < 3; ++j) {
            if (p[i].conexiuni[j].x != 0 || p[i].conexiuni[j].y != 0) { // pct de conexiuni existent
                float pointX = p[i].x - p[i].l / 2 + p[i].conexiuni[j].x;
                float pointY = p[i].y - p[i].h / 2 + p[i].conexiuni[j].y;
                float size = p[i].l / 5; // marimea punctului

                //  mouse ul este peste punct
                if (mouseX >= pointX - size && mouseX <= pointX + size &&
                    mouseY >= pointY - size && mouseY <= pointY + size) {

                    piesaselectata = i;
                    pinselectat = j;
                    return 1;
                }
            }
        }

    return 0;
}
int sourcePiece = -1, targetPiece = -1, sourcePin = -1, targetPin = -1;

void dirVector(int &a, int &b){
    //saves most important direction
    //if its more to the right than up then it will be right etc
    if(abs(a)>abs(b)){
        a=(a>0)-(a<0);
        b=0;
    }
    else{
        b=(b>0)-(b<0);
        a=0;
    }
}

void drawConnect(SDL_Renderer* renderer, int i) {

    //black line between 2 pieces, to be changed later
    SDL_SetRenderDrawColor(renderer, 0, 0, 0,0);
    //SDL_RenderDrawLine(renderer, p[c[i].p1].conexiuni[c[i].pin1].x + p[c[i].p1].x - p[c[i].p1].l / 2, p[c[i].p1].conexiuni[c[i].pin1].y + p[c[i].p1].y - p[c[i].p1].h / 2,
        //p[c[i].p2].conexiuni[c[i].pin2].x +p[c[i].p2].x -p[c[i].p2].l / 2, p[c[i].p2].conexiuni[c[i].pin2].y+p[c[i].p2].y - p[c[i].p2].h / 2);
    int x1=p[c[i].p1].conexiuni[c[i].pin1].x + p[c[i].p1].x - p[c[i].p1].l / 2- p[c[i].p1].l / 17;;
    int y1=p[c[i].p1].conexiuni[c[i].pin1].y + p[c[i].p1].y - p[c[i].p1].h / 2- p[c[i].p1].h / 17;;
    int x2=p[c[i].p2].conexiuni[c[i].pin2].x +p[c[i].p2].x -p[c[i].p2].l / 2- p[c[i].p1].l / 17;;
    int y2=p[c[i].p2].conexiuni[c[i].pin2].y+p[c[i].p2].y - p[c[i].p2].h / 2- p[c[i].p1].h / 17;;
    int leftright1, updown1, leftright2, updown2, lc;

    lc=abs(x2-x1)/3+10;

    //1 if right/up -1 if left/down
    leftright1=x1-p[c[i].p1].x;
    updown1=y1-p[c[i].p1].y;
    dirVector(leftright1, updown1);

    //small line to continue the direction
    SDL_RenderDrawLine(renderer, x1, y1, x1+leftright1*lc, y1+updown1*lc);
    x1=x1+leftright1*lc, y1=y1+updown1*lc; //updates where we are


    //same for second one
    leftright2=x2-p[c[i].p2].x;
    updown2=y2-p[c[i].p2].y;
    dirVector(leftright2, updown2);

    SDL_RenderDrawLine(renderer, x2, y2, x2+leftright2*lc, y2+updown2*lc);
    x2=x2+leftright2*lc, y2=y2+updown2*lc;
    //cout<<x1<< " "<<y1<< " "<<x2<< " "<<y2<<leftright1<< " "<<updown2<<endl;
    //390 214 267 3451 -1
    //787 416 609 439 1 0 -1 1
    if(leftright2&&leftright2==-updown1||(leftright1==-leftright2&&leftright1==-1)||x1>x2)
        swap(x1, x2), swap(y1, y2), swap(leftright1, leftright2), swap(updown1, updown2);
    if(leftright1==-1&&leftright1==-updown2&&x1<x2){
        SDL_RenderDrawLine(renderer, x1, y1, x1, max(y2,y1+lc));
        y1=max(y2,y1+lc);
    }
    if(leftright1==1&&leftright1==-updown2&&x1>x2&&y2>=y1){
        //SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderDrawLine(renderer, x1, y1, x1, max(y2, y1+lc));
        y1=max(y2, y1+lc);
    }
    if(updown1==1&&updown1==leftright2&&x1>x2){
        SDL_RenderDrawLine(renderer, x2, y2, x2, max(y1,y2+lc));
        y2=max(y1,y2+lc);
        //cout<<x1<< " "<<y1<< " "<<x2<< " "<<y2<<leftright1<< " "<<updown2<<endl;
    }
    //cout<<x1<< " "<<y1<< " "<<x2<< " "<<y2<<leftright1<< " "<<updown2<<endl;
    if(updown2==-1&&updown2==leftright1&&y2<y1){
        SDL_RenderDrawLine(renderer, x1, y1, x1, y1+lc);
        y1=y1+lc;
        //cout<<x1<< " "<<y1<< " "<<x2<< " "<<y2<<" "<<leftright1<< " "<<updown2<<endl;
    }

    //SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
    if(updown1!=0){
        int aux;
        if(updown1==1){
            aux=max(y1, y2);
        }
        else aux=min(y1, y2);
        SDL_RenderDrawLine(renderer, x1, y1, x1, aux);
        y1=aux; //so that we get a rounder form if both are vertical
        SDL_RenderDrawLine(renderer, x1, y1, x1+(x2-x1)/4, y1);
        x1=x1+(x2-x1)/4;
        leftright1=-leftright2; //so that we get a less harsh connection if one is vertical the other horizontal
    }
    //same for second
    if(updown2!=0){
        int aux;
        if(updown2==1){
            aux=max(y1, y2);
        }
        else aux=min(y1, y2);
        SDL_RenderDrawLine(renderer, x2, y2, x2, aux);
        y2=aux;
        SDL_RenderDrawLine(renderer, x2, y2, x2+(x1-x2)/4, y2);
        x2=x2+(x1-x2)/4;
        leftright2=-leftright1;//working primarily horizontally
    }
    //SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    //cadranu 3 reparat
    if((x1>x2&&leftright2==-1)||(x1<x2&&leftright2==1)||updown1==leftright2)
        swap(x1, x2), swap(y1, y2), swap(leftright1, leftright2), swap(updown1, updown2);
    //so we'll need less cases as x1 is the smaller one

    //SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    //787 416 609 439 1 0 -1 1
    if(leftright1*leftright2<0&&leftright1==-1&&!updown2){
        SDL_RenderDrawLine(renderer, x2, y2, x2, min(y2-lc/2,(y1+y2/2)));
        y2=min(y2-lc/2,(y1+y2/2));
    }
    //SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);

    //cout<<x1<< " "<<y1<< " "<<x2<< " "<<y2<<" "<<leftright1<< " "<<updown1<< " "<<leftright2<< " "<<updown2<<endl;

    //750 274 566 338 1 0 -1 1
    //SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    if(leftright1*leftright2<0&&leftright2==-1&&!updown1&&x1>x2){
        //swap(x1, x2), swap(y1, y2), swap(leftright1, leftright2), swap(updown1, updown2);
        SDL_RenderDrawLine(renderer, x1, y1, x1, max((y1+y2)/2,y1+lc/2));
        y1=max((y1+y2)/2,y1+lc/2);
        swap(x1, x2), swap(y1, y2), swap(leftright1, leftright2), swap(updown1, updown2);
    }
    //SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);

    //for the cases in which theyre going in opposite directions
    if(updown1*updown2<0){
        SDL_RenderDrawLine(renderer, x2, y2, x2+(x1-x2)/3, y2);
        x2=x2+(x1-x2)/3;
    }
    //SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    //idk if the if else is necessary tbh
    if(x1>x2&&leftright1==updown2==-1)
        swap(x1, x2), swap(y1, y2), swap(leftright1, leftright2), swap(updown1, updown2);
    if(updown1&&updown2){
        SDL_RenderDrawLine(renderer, x1, y1, x2, y1);
        SDL_RenderDrawLine(renderer, x2, y1, x2, y2);
    }
    else {
        SDL_RenderDrawLine(renderer, x1, y1, x1, y2);
        SDL_RenderDrawLine(renderer, x1, y2, x2, y2);
    }
}
void connect(SDL_Renderer* renderer) {

    // Găsește piesa și pinul sursă
    if (targetPiece != -1 && targetPiece != sourcePiece || sourcePiece == -1) {
        sourcePiece = -1, targetPiece = -1, sourcePin = -1, targetPin = -1;

        if (!inPunct(x, y, sourcePiece, sourcePin)) {
            cout << "Nu s-a selectat un punct valid pentru conexiune." << endl;
            return;
        }
    }


    // Găsește piesa și pinul destinație
    if (!inPunct(x, y, targetPiece, targetPin) || sourcePiece == targetPiece) {
        cout << "Nu se poate realiza conexiunea." << sourcePiece << " " << targetPiece << endl;
        return;
    }



    // Creează conexiunea
    c[k2] = { sourcePiece, targetPiece, 0, sourcePin, targetPin };
    p[sourcePiece].esteliber[sourcePin]++;
    p[targetPiece].esteliber[targetPin]++;

    drawConnect(renderer, k2);

    k2++;

    cout << "Conexiune realizată între piesa " << sourcePiece << " și " << targetPiece << "." << endl;


}

void moveScreen(SDL_Renderer* render, SDL_Event event) {
    SDL_GetMouseState(&x, &y);
    int i;
    for (i = 1;i < k;i++) {
        p[i].x += event.motion.xrel; // moves position
        p[i].y += event.motion.yrel;
    }
}

void zoomScreen(SDL_Renderer* renderer, float zoom) {
    SDL_GetMouseState(&x, &y);
    int i;
    for (i = 1;i < k;i++) {
        p[i].x += (p[i].x - x) * zoom; // moves position
        p[i].y += (p[i].y - y) * zoom;
        p[i].l += p[i].l * zoom;
        p[i].h += p[i].h * zoom;
            setConexiuni(p[i].tip, p[i]);

    }
    for (i = 0;i < ogk;i++) {
        ogp[i].l += ogp[i].l * zoom;
        ogp[i].h += ogp[i].h * zoom;

    }
}

void drawLine(SDL_Renderer* renderer) {
    //no use for testing only
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_RenderDrawLine(renderer, 100, 100, 700, 500);
}


void redrawAll(SDL_Renderer* renderer) {
    int i;
    SDL_SetRenderDrawColor(renderer, 255, 182, 193, 255);
    SDL_RenderClear(renderer);
    //drawMenu(renderer);
    for (i = 1;i < k;i++) {
        drawPiece(renderer, i);
    }
    for (i = 1;i < k2;i++) {
        drawConnect(renderer, i);
    }
    drawMenu(renderer);
    drawPieceMenu(renderer, pm);
    SDL_RenderPresent(renderer);
}


int main() {
    //TTF_Font* font = TTF_OpenFont("C:\\Electron\\Movistar Text Regular.ttf", 20);

    //create window
    SDL_Init(SDL_INIT_VIDEO);
    SDL_Window* window = SDL_CreateWindow("Fereastra SDL2", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1200, 800, 0);

    //create renderer NOT the same thing as window
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    SDL_Event event;

    //set bg color (r g b values)
    SDL_SetRenderDrawColor(renderer, 30, 20, 80, 255);
    SDL_RenderClear(renderer);
    drawMenu(renderer);
    SDL_RenderPresent(renderer);

    declarePieces(renderer);
    //start main loop
    int movep = 0, current;
    int running = 1;
    while (running) {
        //here add events= things that happen
        while (SDL_PollEvent(&event)) {
            SDL_GetMouseState(&x, &y);
            //when click
            if (event.type == SDL_MOUSEBUTTONDOWN) {
                //takes mouse position in x y
                SDL_GetMouseState(&x, &y);

                cout << inPiece(); //de verificare
                current = inPiece();

                if (event.button.button == SDL_BUTTON_RIGHT)
                    c[k2].p2 = 0;//dam cancel la conexiune

                connect(renderer); //wont do anything if we dont connect
                //can connect while moving maybe good maybe bad

                if (moves)moves2 = 1;//otherwise will move the screen infinitely
                else moves2 = 0;

                if(event.button.clicks == 2&&inPiece()){
                    pm=inPiece();

                }
                if(!inPiece()&&!inPieceMenu()) pm=0;

                menu(renderer); //checks if menu was pressed
                if (!clickMenu&&!inPieceMenu()){
                    if (!inPiece() && !moves&&!inPunct(x,y,targetPiece,targetPin))createPiece(renderer); //draws if nothing else
                    else movep = 1;//placeholder trb mutat in void separat
                }
                if(event.button.button == SDL_BUTTON_RIGHT&&inPiece())
                    deletePiece(inPiece());

            }
            if (inPiece() && event.type == SDL_MOUSEMOTION && movep && !moves2) {
                movePiece(renderer, event);
                if(p[inPiece()].a==1)premovex=x, premovey=y;

            }

            if(movepm){
                movePieceMenu(renderer, event);
            }

            if (event.type == SDL_MOUSEMOTION && moves2)
                moveScreen(renderer, event);

            if (event.type == SDL_MOUSEBUTTONUP){
                int aux=inPiece();
                if(p[inPiece()].a==0)p[aux].x=premovex, p[aux].y=premovey, p[aux].a=1;
                movep = 0, moves2 = 0, movepm=0;//stops moving
            }


            //when key press
            //resize also maybe move in void somehow??
            if (event.type == SDL_KEYDOWN) {
                if (event.key.keysym.sym == SDLK_RIGHT && current) {
                    p[current].l += 0.1 * p[current].l;
                    p[current].h += 0.1 * p[current].h;
                }
                if (event.key.keysym.sym == SDLK_LEFT && current) {
                    p[current].l -= 0.1 * p[current].l;
                    p[current].h -= 0.1 * p[current].h;
                }
                if (event.key.keysym.sym == SDLK_RIGHT && moves) {
                    zoomScreen(renderer, 0.1);
                }
                if (event.key.keysym.sym == SDLK_LEFT && moves) {
                    zoomScreen(renderer, -0.1);
                }
                c[k2].p2 = 0;//dam cancel la conexiune
            }

            //when close window = ends main while
            if (event.type == SDL_QUIT) {
                running = 0;
            }
            redrawAll(renderer);
        }
        //resets color after connection turns it white
        SDL_SetRenderDrawColor(renderer, col[t].r, col[t].g, col[t].b, col[t].a);
        //updates screen on every frame = for now NOT necessary but who knows
        //SDL_RenderPresent(renderer);
    }
    return 0;
}
